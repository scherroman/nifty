{
  "address": "0x3E5d4F330C059b2Df5B19d6F9E188c74E5aA165b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ListingPriceNotPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ListingPriceNotProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftAlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftNotApprovedForMarketplace",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftNotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoProceedsToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOfNft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawProceedsFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "NftBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "NftListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "NftUnlisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "buyNft",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listingByNftIdByNftAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfListings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proceeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "unlistNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32e88dfb0e21b91b60d38e4772cb5261bf1a760cc2c0eabdfd410bb6e79003c7",
  "receipt": {
    "to": null,
    "from": "0xEac8221b3457884717B256C44f7E48Ec1dad1d3F",
    "contractAddress": "0x3E5d4F330C059b2Df5B19d6F9E188c74E5aA165b",
    "transactionIndex": 69,
    "gasUsed": "1295778",
    "logsBloom": "0x
    "blockHash": "0xd948cc3bb2ac8a88135e66d666253e05651a550168c3bc6b47d2f25c966f4308",
    "transactionHash": "0x32e88dfb0e21b91b60d38e4772cb5261bf1a760cc2c0eabdfd410bb6e79003c7",
    "logs": [],
    "blockNumber": 8100086,
    "cumulativeGasUsed": "10074023",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "808d86abfec6a2b67f66cfc2eec811d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListingPriceNotPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingPriceNotProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftAlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftNotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftNotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoProceedsToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawProceedsFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"NftListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NftUnlisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingByNftIdByNftAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proceeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"unlistNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"listNft(address,uint256,uint256)\":{\"params\":{\"nftAddress\":\": The adress of the NFT contract\",\"nftId\":\": The id of the NFT\",\"price\":\": The asking price for the NFT\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"listNft(address,uint256,uint256)\":{\"notice\":\"Lists an NFT on the marketplace\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nifty.sol\":\"Nifty\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Nifty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ncontract Nifty {\\n    error ListingPriceNotProvided();\\n    error ListingPriceNotPaid(uint price);\\n    error NotOwnerOfNft();\\n    error NftNotApprovedForMarketplace();\\n    error NftAlreadyListed();\\n    error NftNotListed();\\n    error NoProceedsToWithdraw();\\n    error WithdrawProceedsFailed();\\n\\n    struct Listing {\\n        uint price;\\n        address seller;\\n        bool isOpen;\\n    }\\n\\n    uint public numberOfListings = 0;\\n    mapping(address => mapping(uint => Listing))\\n        public listingByNftIdByNftAddress;\\n    mapping(address => uint) public proceeds;\\n\\n    event NftListed(\\n        address indexed nftAddress,\\n        uint indexed nftId,\\n        uint price,\\n        address seller\\n    );\\n    event ListingUpdated(\\n        address indexed nftAddress,\\n        uint indexed nftId,\\n        uint price,\\n        address seller\\n    );\\n    event NftUnlisted(address indexed nftAddress, uint indexed nftId);\\n    event NftBought(\\n        address indexed nftAddress,\\n        uint indexed nftId,\\n        uint price,\\n        address buyer\\n    );\\n\\n    modifier listingPriceProvided(uint price) {\\n        if (price == 0) {\\n            revert ListingPriceNotProvided();\\n        }\\n        _;\\n    }\\n\\n    modifier listingPricePaid(\\n        address nftAddress,\\n        uint nftId,\\n        uint value\\n    ) {\\n        uint price = listingByNftIdByNftAddress[nftAddress][nftId].price;\\n        if (value < price) {\\n            revert ListingPriceNotPaid(price);\\n        }\\n        _;\\n    }\\n\\n    modifier isNftOwner(\\n        address nftAddress,\\n        uint nftId,\\n        address user\\n    ) {\\n        if (IERC721(nftAddress).ownerOf(nftId) != user) {\\n            revert NotOwnerOfNft();\\n        }\\n        _;\\n    }\\n\\n    modifier nftIsApproved(address nftAddress, uint nftId) {\\n        if (IERC721(nftAddress).getApproved(nftId) != address(this)) {\\n            revert NftNotApprovedForMarketplace();\\n        }\\n        _;\\n    }\\n\\n    modifier nftIsUnlisted(address nftAddress, uint nftId) {\\n        if (listingByNftIdByNftAddress[nftAddress][nftId].isOpen) {\\n            revert NftAlreadyListed();\\n        }\\n        _;\\n    }\\n\\n    modifier nftIsListed(address nftAddress, uint nftId) {\\n        if (listingByNftIdByNftAddress[nftAddress][nftId].price == 0) {\\n            revert NftNotListed();\\n        }\\n        _;\\n    }\\n\\n    modifier hasProceeds(address user) {\\n        if (proceeds[user] == 0) {\\n            revert NoProceedsToWithdraw();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Lists an NFT on the marketplace\\n     * @param nftAddress: The adress of the NFT contract\\n     * @param nftId: The id of the NFT\\n     * @param price: The asking price for the NFT\\n     */\\n    function listNft(\\n        address nftAddress,\\n        uint nftId,\\n        uint price\\n    )\\n        external\\n        listingPriceProvided(price)\\n        isNftOwner(nftAddress, nftId, msg.sender)\\n        nftIsApproved(nftAddress, nftId)\\n        nftIsUnlisted(nftAddress, nftId)\\n    {\\n        address seller = msg.sender;\\n        listingByNftIdByNftAddress[nftAddress][nftId] = Listing(\\n            price,\\n            seller,\\n            true // isOpen\\n        );\\n        numberOfListings++;\\n\\n        emit NftListed(nftAddress, nftId, price, seller);\\n    }\\n\\n    function updateListing(\\n        address nftAddress,\\n        uint nftId,\\n        uint price\\n    )\\n        external\\n        listingPriceProvided(price)\\n        isNftOwner(nftAddress, nftId, msg.sender)\\n        nftIsListed(nftAddress, nftId)\\n    {\\n        address seller = msg.sender;\\n        Listing storage listing = listingByNftIdByNftAddress[nftAddress][nftId];\\n        listing.price = price;\\n        listing.seller = seller;\\n\\n        emit ListingUpdated(nftAddress, nftId, price, seller);\\n    }\\n\\n    function unlistNft(\\n        address nftAddress,\\n        uint nftId\\n    )\\n        external\\n        isNftOwner(nftAddress, nftId, msg.sender)\\n        nftIsListed(nftAddress, nftId)\\n    {\\n        _unlistNft(nftAddress, nftId);\\n    }\\n\\n    function _unlistNft(address nftAddress, uint nftId) private {\\n        delete listingByNftIdByNftAddress[nftAddress][nftId];\\n        numberOfListings--;\\n\\n        emit NftUnlisted(nftAddress, nftId);\\n    }\\n\\n    function buyNft(\\n        address nftAddress,\\n        uint nftId\\n    )\\n        external\\n        payable\\n        nftIsListed(nftAddress, nftId)\\n        listingPricePaid(nftAddress, nftId, msg.value)\\n    {\\n        address buyer = msg.sender;\\n        IERC721 nft = IERC721(nftAddress);\\n        Listing memory listing = listingByNftIdByNftAddress[nftAddress][nftId];\\n        uint initialSellerProceeds = proceeds[listing.seller];\\n\\n        proceeds[listing.seller] += listing.price;\\n        _unlistNft(nftAddress, nftId);\\n\\n        emit NftBought(nftAddress, nftId, listing.price, buyer);\\n\\n        nft.safeTransferFrom(listing.seller, buyer, nftId);\\n\\n        assert(nft.ownerOf(nftId) == buyer);\\n        assert(\\n            proceeds[listing.seller] == initialSellerProceeds + listing.price\\n        );\\n    }\\n\\n    function withdrawProceeds() external hasProceeds(msg.sender) {\\n        uint initialContractBalance = address(this).balance;\\n        uint userProceeds = proceeds[msg.sender];\\n        proceeds[msg.sender] = 0;\\n        (bool success, ) = msg.sender.call{value: userProceeds}('');\\n        if (!success) {\\n            revert WithdrawProceedsFailed();\\n        }\\n\\n        assert(address(this).balance == initialContractBalance - userProceeds);\\n        assert(proceeds[msg.sender] == 0);\\n    }\\n}\\n\",\"keccak256\":\"0x9a08fbb80e11ef429dd19edc66660b03e745a3cbaaa311426160254c0dc9b659\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b5061168a806100246000396000f3fe60806040526004361061007b5760003560e01c80639038e6931161004e5780639038e69314610141578063c922b17c14610158578063e0ba5b4414610181578063f772adf1146101ac5761007b565b80632c60f7ed1461008057806335adde54146100bf5780634ddf4f8f146100fc57806354e6448e14610118575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a291906112ea565b6101d5565b6040516100b693929190611363565b60405180910390f35b3480156100cb57600080fd5b506100e660048036038101906100e1919061139a565b610239565b6040516100f391906113c7565b60405180910390f35b610116600480360381019061011191906112ea565b610251565b005b34801561012457600080fd5b5061013f600480360381019061013a91906112ea565b610701565b005b34801561014d57600080fd5b50610156610884565b005b34801561016457600080fd5b5061017f600480360381019061017a91906113e2565b610aa0565b005b34801561018d57600080fd5b50610196610ea9565b6040516101a391906113c7565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce91906113e2565b610eaf565b005b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b60026020528060005260406000206000915090505481565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154036102e0576040517f503620e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383346000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206000015490508082101561038057806040517f05b4fea600000000000000000000000000000000000000000000000000000000815260040161037791906113c7565b60405180910390fd5b600033905060008990506000600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815250509050600060026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050816000015160026000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105039190611464565b925050819055506105148c8c61115d565b8a8c73ffffffffffffffffffffffffffffffffffffffff167f25f40edf7c819e0e06596468099c693df51e8756111ca329f5e0d66f4e54171c846000015187604051610561929190611498565b60405180910390a38273ffffffffffffffffffffffffffffffffffffffff166342842e0e8360200151868e6040518463ffffffff1660e01b81526004016105aa939291906114c1565b600060405180830381600087803b1580156105c457600080fd5b505af11580156105d8573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b815260040161062c91906113c7565b602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d919061150d565b73ffffffffffffffffffffffffffffffffffffffff16146106915761069061153a565b5b8160000151816106a19190611464565b60026000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146106f3576106f261153a565b5b505050505050505050505050565b8181338073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161075491906113c7565b602060405180830381865afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610795919061150d565b73ffffffffffffffffffffffffffffffffffffffff16146107e2576040517f625e0d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84846000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015403610871576040517f503620e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61087b878761115d565b50505050505050565b336000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036108fe576040517fba414ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516109b29061159a565b60006040518083038185875af1925050503d80600081146109ef576040519150601f19603f3d011682016040523d82523d6000602084013e6109f4565b606091505b5050905080610a2f576040517f0ca5b23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8183610a3b91906115af565b4714610a4a57610a4961153a565b5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610a9a57610a9961153a565b5b50505050565b8060008103610adb576040517fc78a11b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383338073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610b2e91906113c7565b602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f919061150d565b73ffffffffffffffffffffffffffffffffffffffff1614610bbc576040517f625e0d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86863073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff1660e01b8152600401610c0e91906113c7565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061150d565b73ffffffffffffffffffffffffffffffffffffffff1614610c9c576040517f7194c82a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8888600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060010160149054906101000a900460ff1615610d36576040517f95b46a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600033905060405180606001604052808b81526020018273ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908315150217905550905050600080815480929190610e45906115e3565b91905055508a8c73ffffffffffffffffffffffffffffffffffffffff167f48645976acd1c1a4bc2322dfceba4fbb73dc23084fdced0c30d08e0426cfb6d08c84604051610e93929190611498565b60405180910390a3505050505050505050505050565b60005481565b8060008103610eea576040517fc78a11b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383338073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610f3d91906113c7565b602060405180830381865afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e919061150d565b73ffffffffffffffffffffffffffffffffffffffff1614610fcb576040517f625e0d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600001540361105a576040517f503620e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390506000600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000209050888160000181905550818160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898b73ffffffffffffffffffffffffffffffffffffffff167f3199bfdff711ec1ab8ab8449dc3b8d3fa30a59861a734a9d26f7b1a38162df758b85604051611148929190611498565b60405180910390a35050505050505050505050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160146101000a81549060ff021916905550506000808154809291906112059061162b565b9190505550808273ffffffffffffffffffffffffffffffffffffffff167e38f3e47004950b890d9df255df5e1b6921cf589f4b44b2259df5009593666460405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061128182611256565b9050919050565b61129181611276565b811461129c57600080fd5b50565b6000813590506112ae81611288565b92915050565b6000819050919050565b6112c7816112b4565b81146112d257600080fd5b50565b6000813590506112e4816112be565b92915050565b6000806040838503121561130157611300611251565b5b600061130f8582860161129f565b9250506020611320858286016112d5565b9150509250929050565b611333816112b4565b82525050565b61134281611276565b82525050565b60008115159050919050565b61135d81611348565b82525050565b6000606082019050611378600083018661132a565b6113856020830185611339565b6113926040830184611354565b949350505050565b6000602082840312156113b0576113af611251565b5b60006113be8482850161129f565b91505092915050565b60006020820190506113dc600083018461132a565b92915050565b6000806000606084860312156113fb576113fa611251565b5b60006114098682870161129f565b935050602061141a868287016112d5565b925050604061142b868287016112d5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061146f826112b4565b915061147a836112b4565b925082820190508082111561149257611491611435565b5b92915050565b60006040820190506114ad600083018561132a565b6114ba6020830184611339565b9392505050565b60006060820190506114d66000830186611339565b6114e36020830185611339565b6114f0604083018461132a565b949350505050565b60008151905061150781611288565b92915050565b60006020828403121561152357611522611251565b5b6000611531848285016114f8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081905092915050565b50565b6000611584600083611569565b915061158f82611574565b600082019050919050565b60006115a582611577565b9150819050919050565b60006115ba826112b4565b91506115c5836112b4565b92508282039050818111156115dd576115dc611435565b5b92915050565b60006115ee826112b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116205761161f611435565b5b600182019050919050565b6000611636826112b4565b91506000820361164957611648611435565b5b60018203905091905056fea26469706673582212208724c3251a921323c4bc49e9531e4914ff365e764ae16a2cbac677185afc449b64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639038e6931161004e5780639038e69314610141578063c922b17c14610158578063e0ba5b4414610181578063f772adf1146101ac5761007b565b80632c60f7ed1461008057806335adde54146100bf5780634ddf4f8f146100fc57806354e6448e14610118575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a291906112ea565b6101d5565b6040516100b693929190611363565b60405180910390f35b3480156100cb57600080fd5b506100e660048036038101906100e1919061139a565b610239565b6040516100f391906113c7565b60405180910390f35b610116600480360381019061011191906112ea565b610251565b005b34801561012457600080fd5b5061013f600480360381019061013a91906112ea565b610701565b005b34801561014d57600080fd5b50610156610884565b005b34801561016457600080fd5b5061017f600480360381019061017a91906113e2565b610aa0565b005b34801561018d57600080fd5b50610196610ea9565b6040516101a391906113c7565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce91906113e2565b610eaf565b005b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b60026020528060005260406000206000915090505481565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060000154036102e0576040517f503620e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383346000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206000015490508082101561038057806040517f05b4fea600000000000000000000000000000000000000000000000000000000815260040161037791906113c7565b60405180910390fd5b600033905060008990506000600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815250509050600060026000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050816000015160026000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105039190611464565b925050819055506105148c8c61115d565b8a8c73ffffffffffffffffffffffffffffffffffffffff167f25f40edf7c819e0e06596468099c693df51e8756111ca329f5e0d66f4e54171c846000015187604051610561929190611498565b60405180910390a38273ffffffffffffffffffffffffffffffffffffffff166342842e0e8360200151868e6040518463ffffffff1660e01b81526004016105aa939291906114c1565b600060405180830381600087803b1580156105c457600080fd5b505af11580156105d8573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b815260040161062c91906113c7565b602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d919061150d565b73ffffffffffffffffffffffffffffffffffffffff16146106915761069061153a565b5b8160000151816106a19190611464565b60026000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146106f3576106f261153a565b5b505050505050505050505050565b8181338073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161075491906113c7565b602060405180830381865afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610795919061150d565b73ffffffffffffffffffffffffffffffffffffffff16146107e2576040517f625e0d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84846000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000015403610871576040517f503620e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61087b878761115d565b50505050505050565b336000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036108fe576040517fba414ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004790506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516109b29061159a565b60006040518083038185875af1925050503d80600081146109ef576040519150601f19603f3d011682016040523d82523d6000602084013e6109f4565b606091505b5050905080610a2f576040517f0ca5b23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8183610a3b91906115af565b4714610a4a57610a4961153a565b5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610a9a57610a9961153a565b5b50505050565b8060008103610adb576040517fc78a11b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383338073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610b2e91906113c7565b602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f919061150d565b73ffffffffffffffffffffffffffffffffffffffff1614610bbc576040517f625e0d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86863073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff1660e01b8152600401610c0e91906113c7565b602060405180830381865afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061150d565b73ffffffffffffffffffffffffffffffffffffffff1614610c9c576040517f7194c82a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8888600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060010160149054906101000a900460ff1615610d36576040517f95b46a0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600033905060405180606001604052808b81526020018273ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d81526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908315150217905550905050600080815480929190610e45906115e3565b91905055508a8c73ffffffffffffffffffffffffffffffffffffffff167f48645976acd1c1a4bc2322dfceba4fbb73dc23084fdced0c30d08e0426cfb6d08c84604051610e93929190611498565b60405180910390a3505050505050505050505050565b60005481565b8060008103610eea576040517fc78a11b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383338073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610f3d91906113c7565b602060405180830381865afa158015610f5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7e919061150d565b73ffffffffffffffffffffffffffffffffffffffff1614610fcb576040517f625e0d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600001540361105a576040517f503620e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003390506000600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000209050888160000181905550818160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550898b73ffffffffffffffffffffffffffffffffffffffff167f3199bfdff711ec1ab8ab8449dc3b8d3fa30a59861a734a9d26f7b1a38162df758b85604051611148929190611498565b60405180910390a35050505050505050505050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160146101000a81549060ff021916905550506000808154809291906112059061162b565b9190505550808273ffffffffffffffffffffffffffffffffffffffff167e38f3e47004950b890d9df255df5e1b6921cf589f4b44b2259df5009593666460405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061128182611256565b9050919050565b61129181611276565b811461129c57600080fd5b50565b6000813590506112ae81611288565b92915050565b6000819050919050565b6112c7816112b4565b81146112d257600080fd5b50565b6000813590506112e4816112be565b92915050565b6000806040838503121561130157611300611251565b5b600061130f8582860161129f565b9250506020611320858286016112d5565b9150509250929050565b611333816112b4565b82525050565b61134281611276565b82525050565b60008115159050919050565b61135d81611348565b82525050565b6000606082019050611378600083018661132a565b6113856020830185611339565b6113926040830184611354565b949350505050565b6000602082840312156113b0576113af611251565b5b60006113be8482850161129f565b91505092915050565b60006020820190506113dc600083018461132a565b92915050565b6000806000606084860312156113fb576113fa611251565b5b60006114098682870161129f565b935050602061141a868287016112d5565b925050604061142b868287016112d5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061146f826112b4565b915061147a836112b4565b925082820190508082111561149257611491611435565b5b92915050565b60006040820190506114ad600083018561132a565b6114ba6020830184611339565b9392505050565b60006060820190506114d66000830186611339565b6114e36020830185611339565b6114f0604083018461132a565b949350505050565b60008151905061150781611288565b92915050565b60006020828403121561152357611522611251565b5b6000611531848285016114f8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081905092915050565b50565b6000611584600083611569565b915061158f82611574565b600082019050919050565b60006115a582611577565b9150819050919050565b60006115ba826112b4565b91506115c5836112b4565b92508282039050818111156115dd576115dc611435565b5b92915050565b60006115ee826112b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116205761161f611435565b5b600182019050919050565b6000611636826112b4565b91506000820361164957611648611435565b5b60018203905091905056fea26469706673582212208724c3251a921323c4bc49e9531e4914ff365e764ae16a2cbac677185afc449b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "listNft(address,uint256,uint256)": {
        "params": {
          "nftAddress": ": The adress of the NFT contract",
          "nftId": ": The id of the NFT",
          "price": ": The asking price for the NFT"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "listNft(address,uint256,uint256)": {
        "notice": "Lists an NFT on the marketplace"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1638,
        "contract": "contracts/Nifty.sol:Nifty",
        "label": "numberOfListings",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1645,
        "contract": "contracts/Nifty.sol:Nifty",
        "label": "listingByNftIdByNftAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)1635_storage))"
      },
      {
        "astId": 1649,
        "contract": "contracts/Nifty.sol:Nifty",
        "label": "proceeds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)1635_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Nifty.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)1635_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)1635_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Nifty.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)1635_storage"
      },
      "t_struct(Listing)1635_storage": {
        "encoding": "inplace",
        "label": "struct Nifty.Listing",
        "members": [
          {
            "astId": 1630,
            "contract": "contracts/Nifty.sol:Nifty",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1632,
            "contract": "contracts/Nifty.sol:Nifty",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1634,
            "contract": "contracts/Nifty.sol:Nifty",
            "label": "isOpen",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}